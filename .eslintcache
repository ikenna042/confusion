[{"/Users/mac/Desktop/Projects/coursera/react/confusion/src/index.js":"1","/Users/mac/Desktop/Projects/coursera/react/confusion/src/App.js":"2","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/MenuComponent.js":"3","/Users/mac/Desktop/Projects/coursera/react/confusion/src/shared/dishes.js":"4","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/DishdetailComponent.js":"5","/Users/mac/Desktop/Projects/coursera/react/confusion/src/reportWebVitals.js":"6","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/MainComponent.js":"7","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/HeaderComponent.js":"8","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/FooterComponent.js":"9","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/HomeComponent.js":"10","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/ContactComponent.js":"11","/Users/mac/Desktop/Projects/coursera/react/confusion/src/shared/comments.js":"12","/Users/mac/Desktop/Projects/coursera/react/confusion/src/shared/leaders.js":"13","/Users/mac/Desktop/Projects/coursera/react/confusion/src/shared/promotions.js":"14","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/AboutComponent.js":"15","/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/configureStore.js":"16","/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/promotions.js":"17","/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/comments.js":"18","/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/ActionTypes.js":"19","/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/dishes.js":"20","/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/ActionCreators.js":"21","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/LoadingComponent.js":"22"},{"size":649,"mtime":1610246111977,"results":"23","hashOfConfig":"24"},{"size":580,"mtime":1611295333097,"results":"25","hashOfConfig":"24"},{"size":2255,"mtime":1611877992407,"results":"26","hashOfConfig":"24"},{"size":1448,"mtime":1610430820812,"results":"27","hashOfConfig":"24"},{"size":7281,"mtime":1611724009120,"results":"28","hashOfConfig":"24"},{"size":362,"mtime":1609728599913,"results":"29","hashOfConfig":"24"},{"size":2572,"mtime":1611723409409,"results":"30","hashOfConfig":"24"},{"size":4944,"mtime":1611462458832,"results":"31","hashOfConfig":"24"},{"size":2589,"mtime":1610349913498,"results":"32","hashOfConfig":"24"},{"size":1071,"mtime":1610430533641,"results":"33","hashOfConfig":"24"},{"size":11302,"mtime":1611320418170,"results":"34","hashOfConfig":"24"},{"size":4118,"mtime":1610430839652,"results":"35","hashOfConfig":"24"},{"size":2345,"mtime":1610430886094,"results":"36","hashOfConfig":"24"},{"size":435,"mtime":1610430869777,"results":"37","hashOfConfig":"24"},{"size":4749,"mtime":1610816946946,"results":"38","hashOfConfig":"24"},{"size":593,"mtime":1611721048553,"results":"39","hashOfConfig":"24"},{"size":186,"mtime":1611500948268,"results":"40","hashOfConfig":"24"},{"size":490,"mtime":1611502911248,"results":"41","hashOfConfig":"24"},{"size":175,"mtime":1611721172140,"results":"42","hashOfConfig":"24"},{"size":604,"mtime":1611722572838,"results":"43","hashOfConfig":"24"},{"size":759,"mtime":1611721813519,"results":"44","hashOfConfig":"24"},{"size":247,"mtime":1611722894121,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1jlyt4x",{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Desktop/Projects/coursera/react/confusion/src/index.js",[],["101","102"],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/App.js",["103","104"],"import { Component } from 'react';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport Main from './components/MainComponent';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\n\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div>\n            <Main />\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n\n}\n\nexport default App;\n","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/MenuComponent.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/shared/dishes.js",[],["105","106"],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/DishdetailComponent.js",["107","108","109","110","111","112","113","114"],"import React, { Component } from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle, Breadcrumb,\n         BreadcrumbItem, Button, Form, FormGroup, Label, Input,\n         Modal, ModalBody, ModalHeader, Row, Col\n        } from 'reactstrap';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\nimport { Loading } from './LoadingComponent';\n\n\n    function RenderDish({dish}) {\n        return (\n            <div className=\"col-12 col-md-5 mt-1\">\n                <Card>\n                    <CardImg top src={dish.image} alt={dish.name} />\n                    <CardBody>\n                        <CardTitle>{dish.name}</CardTitle>\n                        <CardText> {dish.description} </CardText>\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    };\n\n    function RenderComments({comments, addComment, dishId}) {\n        console.log(comments);\n        if (comments != null)\n            return (\n                <div className=\"col-12 col-md-5 mt-1\">\n                    <h4>Comments</h4>\n                    <ul className=\"list-unstyled\">\n                        {comments.map((comment) => {\n                            return (\n                                <li key={comment.id}>\n                                    <p> {comment.comment} </p>\n                                    <p>-- {comment.author}, {comment.date} </p>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                    <Comment dishId={dishId} addComment={addComment} />\n                </div>\n            );\n        else\n            return (\n                <div></div>\n            );\n    }\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => (val) && (val.length >= len);\n\n    class Comment extends Component {\n\n        constructor(props) {\n            super(props);\n\n            this.toggleModal = this.toggleModal.bind(this);\n            this.handleSubmit = this.handleSubmit.bind(this);\n\n            this.state = {\n                isModalOpen: false\n            };\n        }\n    \n        toggleModal() {\n            this.setState({\n                isModalOpen: !this.state.isModalOpen\n            });\n        }\n    \n        handleSubmit(values) {\n            this.toggleModal();\n            this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\n            console.log('Current state is' + JSON.stringify(values));\n        }\n    \n        render() {\n            return (\n                <div>\n                <Button outline onClick={this.toggleModal}><span className=\"fa fa-sign-in fa-lg\"></span> Comment</Button>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\n                    <ModalBody>\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Col md={5}>\n                                    <Label htmlFor=\"rating\">Rating</Label>\n                                    <Control.select model=\".rating\" id=\"rating\" name=\"rating\">\n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                        <option>4</option>\n                                        <option>5</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col>\n                                <Label htmlFor=\"author\">Your Name</Label>\n                                <Control.text model=\".author\" id=\"author\" name=\"author\"\n                                    placeholder=\"Your Name\" className=\"form-control\"\n                                    validators={{\n                                        minLength: minLength(3),\n                                        maxLength: maxLength(15)\n                                    }} />\n                                    <Errors\n                                       className=\"text-danger\"\n                                       model=\".author\"\n                                       show=\"touched\"\n                                       messages={{\n                                           minLength: 'Must be greater than 3',\n                                           maxLength: 'Must be 15 characters or less'\n                                       }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"comment\" md={2}>Comment</Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\n                                        rows=\"6\"\n                                        className=\"form-control\" />\n                                </Col>\n                            </Row>\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\n                        </LocalForm>\n                    </ModalBody>\n                    </Modal>\n                </div>\n            );\n        }\n    }\n\n    const DishDetail = (props) => {\n        if (props.isLoading) {\n            return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <Loading />\n                    </div>\n                </div>\n            );\n        }\n        else if (props.errMess) {\n            return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <h4> {props.errMess} </h4>\n                    </div>\n                </div>\n            );\n        }\n        else if (props.dish != null)\n            return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                    <Breadcrumb>\n                            <BreadcrumbItem>\n                                <Link to=\"./menu\">Menu</Link>\n                            </BreadcrumbItem>\n                    <BreadcrumbItem active> {props.dish.name} </BreadcrumbItem>\n                        </Breadcrumb>\n                    <div className=\"col-12\">\n                        <h3> {props.dish.name} </h3>\n                        <hr />\n                    </div>\n                    </div>\n                    <div className=\"row\">\n                        <RenderDish dish={props.dish} />\n                        <RenderComments comments={props.comments}\n                            addComment={props.addComment}\n                            dishId={props.dish.id}\n                        />\n                    </div>\n                </div>\n            );\n    }\n\n    \n\n\n\n\nexport default DishDetail;","/Users/mac/Desktop/Projects/coursera/react/confusion/src/reportWebVitals.js",[],["115","116"],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/MainComponent.js",["117"],"import { Component } from 'react';\nimport Home from './HomeComponent';\nimport Menu from './MenuComponent';\nimport Contact from './ContactComponent';\nimport DishDetail from './DishdetailComponent';\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport About from './AboutComponent';\nimport { addComment, fetchDishes } from '../redux/ActionCreators';\n\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n\nconst mapStateToProps = state => {\n  return {\n    dishes: state.dishes,\n    comments: state.comments,\n    promotions: state.promotions,\n    leaders: state.leaders\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  \n  addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\n  fetchDishes: () => {dispatch(fetchDishes())}\n});\n\nclass Main extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.fetchDishes();\n  }\n\n  render() {\n\n    const HomePage = () => {\n        return(\n            <Home dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\n            dishesLoading={this.props.dishes.isLoading}\n            dishesErrMess={this.props.dishes.errMess}\n            promotion={this.props.promotions.filter((promotion) => promotion.featured)[0]}\n            leader={this.props.leaders.filter((leader) => leader.featured)[0]} />\n        );\n    }\n\n    const DishWithId = ({match}) => {\n        return(\n          <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\n            isLoading={this.props.dishes.isLoading}\n            errMess={this.props.dishes.errMess}\n            comments={this.props.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\n            addComment={this.props.addComment}\n        />\n        );\n    }\n\n    return (\n      <div>\n          <Header />\n          <Switch>\n              <Route path=\"/home\" component={HomePage} />\n              <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\n              <Route path=\"/menu/:dishId\" component={DishWithId} />\n              <Route exact path=\"/contactus\" component={() => <Contact />} />\n              <Route exact path=\"/aboutus\" component={() => <About leaders={this.props.leaders} />} />\n              <Redirect to=\"/home\" />\n          </Switch>\n          <Footer />\n      </div>\n    );\n  }\n\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\n","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/HeaderComponent.js",["118"],"import React, { Component } from 'react';\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron,\n         Button, Modal, ModalHeader, ModalBody, FormGroup, Input, Label, Form } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isNavOpen: false,\n            isModalOpen: false\n        };\n        this.toggleNav = this.toggleNav.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n    }\n\n    toggleNav() {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        });\n    }\n\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    handleLogin() {\n        this.toggleModal();\n        alert('Username is '+ this.username.value + ' Passwords is ' \n        + this.password.value +  ' Remember is set to ' + this.remember.checked); \n    }\n\n    render() {\n        return(\n            <>\n                <Navbar dark expand=\"md\">\n                <div className=\"container\">\n                    <NavbarToggler onClick={this.toggleNav} />\n                <NavbarBrand className=\"mr-auto\" href=\"/\">\n                    <img src=\"assets/images/logo.png\" height=\"30\" width=\"41\" alt=\"Image Logo\" />\n                </NavbarBrand>\n                <Collapse isOpen={this.state.isNavOpen} navbar>\n                <Nav navbar>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/home\">\n                            <span className=\"fa fa-home fa-lg\"></span> Home\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/aboutus\">\n                            <span className=\"fa fa-info fa-lg\"></span> About Us\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/menu\">\n                            <span className=\"fa fa-list fa-lg\"></span> Menu\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/contactus\">\n                            <span className=\"fa fa-address-card fa-lg\"></span> Contact Us\n                        </NavLink>\n                    </NavItem>\n                </Nav>\n                <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        <Button outline onClick={this.toggleModal}><span className=\"fa fa-sign-in fa-lg\"></span> Login</Button>\n                    </NavItem>\n                </Nav>\n                </Collapse>\n                </div>\n                </Navbar>\n                <Jumbotron>\n                    <div className=\"container\">\n                        <div className=\"row row-header\">\n                            <div className=\"col-12 col-sm-6\">\n                                <h1>Ristorante Con Fusion</h1>\n                                <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>\n                            </div>\n                        </div>\n                    </div>\n                </Jumbotron>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.handleLogin}>\n                            <FormGroup>\n                                <Label htmlFor=\"username\">Username</Label>\n                                <Input type=\"text\" id=\"username\" name=\"username\"\n                                    innerRef={(input) => this.username = input} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label htmlFor=\"password\">Password</Label>\n                                <Input type=\"password\" id=\"password\" name=\"password\"\n                                    innerRef={(input) => this.password = input} />\n                            </FormGroup>\n                            <FormGroup check>\n                                <Label check>\n                                    <Input type=\"checkbox\" name=\"remember\" \n                                    innerRef={(input) => this.remember = input} />\n                                    Remember me\n                                </Label>\n                            </FormGroup>\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default Header;","/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/FooterComponent.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/HomeComponent.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/ContactComponent.js",["119","120","121","122","123","124","125","126"],"import React, { Component } from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => (val) && (val.length >= len);\nconst isNumber = (val) => !isNaN(Number(val));\nconst validEmail = (val) => /^[A-z0-9._%+-]+@[A-Z0-9.-]+\\.[A-z]{2,4}$/i.test(val);\n\nclass Contact extends Component {\n\n    constructor (props) {\n        super(props);\n\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(values) {\n        console.log('Current State is: ' + JSON.stringify(values));\n        alert('Current State is: ' + JSON.stringify(values));\n    }\n\n\n\n    render() {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                        <Breadcrumb>\n                            <BreadcrumbItem>\n                                <Link to=\"./home\">Home</Link>\n                            </BreadcrumbItem>\n                            <BreadcrumbItem active>Contact Us</BreadcrumbItem>\n                        </Breadcrumb>\n                        <div className=\"col-12\">\n                            <h3>Contact Us</h3>\n                            <hr />\n                        </div>\n                    </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                    <h3>Location Information</h3>\n                    </div>\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\n                            <h5>Our Address</h5>\n                            <address>\n                            121, Clear Water Bay Road<br />\n                            Clear Water Bay, Kowloon<br />\n                            HONG KONG<br />\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\n                            </address>\n                    </div>\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\n                        <h5>Map of our Location</h5>\n                    </div>\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\n                        <div className=\"btn-group\" role=\"group\">\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h3>Send us your feedback</h3>\n                    </div>\n                    <div className=\"col-12 col-md-9\">\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\n                                        placeholder=\"First Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(3),\n                                            maxLength: maxLength(15)\n                                        }}\n                                         />\n                                         <Errors\n                                            className=\"text-danger\"\n                                            model=\".firstname\"\n                                            show=\"touched\"\n                                            messages={{\n                                                required: 'Required',\n                                                minLength: 'Must be greater than 2',\n                                                maxLength: 'Must be 15 characters or less'\n                                            }}\n                                          />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\n                                        placeholder=\"Last Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(3),\n                                            maxLength: maxLength(15)\n                                        }}\n                                         />\n                                         <Errors\n                                            className=\"text-danger\"\n                                            model=\".lastname\"\n                                            show=\"touched\"\n                                            messages={{\n                                                required: 'Required',\n                                                minLength: 'Must be greater than 2',\n                                                maxLength: 'Must be 15 characters or less'\n                                            }}\n                                          />\n                                </Col>                        \n                            </Row>\n                            <Row className=\"form-group\">\n                            <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\n                                        placeholder=\"Tel. number\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            minLength: minLength(3),\n                                            maxLength: maxLength(15),\n                                            isNumber\n                                        }}\n                                         />\n                                         <Errors\n                                            className=\"text-danger\"\n                                            model=\".telnum\"\n                                            show=\"touched\"\n                                            messages={{\n                                                required: 'Required',\n                                                minLength: 'Must be greater than 2 numbers',\n                                                maxLength: 'Must be 15 numbers or less',\n                                                isNumber: 'Must be a number'\n                                            }}\n                                          />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required,\n                                            validEmail\n                                        }}\n                                         />\n                                         <Errors\n                                            className=\"text-danger\"\n                                            model=\".email\"\n                                            show=\"touched\"\n                                            messages={{\n                                                required: 'Required',\n                                                validEmail: 'Must be a valid email'\n                                            }}\n                                          />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 6, offset: 2}}>\n                                    <div className=\"form-check\">\n                                        <Label check>\n                                            <Control.checkbox model=\".agree\"\n                                                name=\"agree\"\n                                                className=\"form-check-input\" /> {' '}\n                                            <strong>May we contact you?</strong>\n                                        </Label>\n                                    </div>\n                                </Col>\n                                <Col md={{size: 3, offset: 1}}>\n                                    <Control.select model=\".contactType\" name=\"contactType\"\n                                            className=\"form-control\">\n                                        <option>Tel.</option>\n                                        <option>Email</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\n                                        rows=\"12\"\n                                        className=\"form-control\" />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                        Send Feedback\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </LocalForm>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Contact;","/Users/mac/Desktop/Projects/coursera/react/confusion/src/shared/comments.js",[],["127","128"],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/shared/leaders.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/shared/promotions.js",[],["129","130"],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/AboutComponent.js",["131"],"import React from 'react';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, Media } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nfunction RenderLeader(data) {\n    console.log(data);\n    return (\n            <Media>\n                {data.name}\n                <Media left top>\n                    <Media object data-src={data.image} alt={data.name} />\n                </Media>\n                <Media body>\n                    <Media heading>\n                        The heading here\n                        {/* {data.name} */}\n                    </Media>\n                    {data.description}\n                </Media>\n            </Media>\n    );\n}\nfunction About(props) {\n    console.log(props);\n    const leaders = props.leaders.map((leader) => {\n        return (\n            <div key={leader.id} className=\"row row-content\">\n                <div className=\"col-12 col-md-10\">\n                <Media>\n                <Media left top>\n                    <Media object src={leader.image} alt={leader.name} />\n                </Media>\n                <Media body>\n                    <Media heading>\n                        {leader.name}\n                    </Media>\n                    <p>{leader.designation}</p>\n                    {leader.description}\n                </Media>\n            </Media>\n                </div>\n                \n            </div>\n            \n        );\n    });\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <Breadcrumb>\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                    <BreadcrumbItem active>About Us</BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"col-12\">\n                    <h3>About Us</h3>\n                    <hr />\n                </div>                \n            </div>\n            <div className=\"row row-content\">\n                <div className=\"col-12 col-md-6\">\n                    <h2>Our History</h2>\n                    <p>Started in 2010, Ristorante con Fusion quickly established itself as a culinary icon par excellence in Hong Kong. With its unique brand of world fusion cuisine that can be found nowhere else, it enjoys patronage from the A-list clientele in Hong Kong.  Featuring four of the best three-star Michelin chefs in the world, you never know what will arrive on your plate the next time you visit us.</p>\n                    <p>The restaurant traces its humble beginnings to <em>The Frying Pan</em>, a successful chain started by our CEO, Mr. Peter Pan, that featured for the first time the world's best cuisines in a pan.</p>\n                </div>\n                <div className=\"col-12 col-md-5\">\n                    <Card>\n                        <CardHeader className=\"bg-primary text-white\">Facts At a Glance</CardHeader>\n                        <CardBody>\n                            <dl className=\"row p-1\">\n                                <dt className=\"col-6\">Started</dt>\n                                <dd className=\"col-6\">3 Feb. 2013</dd>\n                                <dt className=\"col-6\">Major Stake Holder</dt>\n                                <dd className=\"col-6\">HK Fine Foods Inc.</dd>\n                                <dt className=\"col-6\">Last Year's Turnover</dt>\n                                <dd className=\"col-6\">$1,250,375</dd>\n                                <dt className=\"col-6\">Employees</dt>\n                                <dd className=\"col-6\">40</dd>\n                            </dl>\n                        </CardBody>\n                    </Card>\n                </div>\n                <div className=\"col-12\">\n                    <Card>\n                        <CardBody className=\"bg-faded\">\n                            <blockquote className=\"blockquote\">\n                                <p className=\"mb-0\">You better cut the pizza in four pieces because\n                                    I'm not hungry enough to eat six.</p>\n                                <footer className=\"blockquote-footer\">Yogi Berra,\n                                <cite title=\"Source Title\">The Wit and Wisdom of Yogi Berra,\n                                    P. Pepe, Diversion Books, 2014</cite>\n                                </footer>\n                            </blockquote>\n                        </CardBody>\n                    </Card>\n                </div>\n            </div>\n            <div className=\"row row-content\">\n                <div className=\"col-12\">\n                    <h2>Corporate Leadership</h2>\n                </div>\n                <div>\n                    {leaders}\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default About;","/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/configureStore.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/promotions.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/comments.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/ActionTypes.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/dishes.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/redux/ActionCreators.js",[],"/Users/mac/Desktop/Projects/coursera/react/confusion/src/components/LoadingComponent.js",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":16},{"ruleId":"136","severity":1,"message":"140","line":2,"column":18,"nodeType":"138","messageId":"139","endLine":2,"endColumn":29},{"ruleId":"132","replacedBy":"141"},{"ruleId":"134","replacedBy":"142"},{"ruleId":"136","severity":1,"message":"143","line":3,"column":34,"nodeType":"138","messageId":"139","endLine":3,"endColumn":38},{"ruleId":"136","severity":1,"message":"144","line":3,"column":40,"nodeType":"138","messageId":"139","endLine":3,"endColumn":49},{"ruleId":"136","severity":1,"message":"145","line":3,"column":58,"nodeType":"138","messageId":"139","endLine":3,"endColumn":63},{"ruleId":"136","severity":1,"message":"146","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":14},{"ruleId":"136","severity":1,"message":"147","line":51,"column":7,"nodeType":"138","messageId":"139","endLine":51,"endColumn":15},{"ruleId":"148","severity":1,"message":"149","line":91,"column":37,"nodeType":"150","endLine":91,"endColumn":95},{"ruleId":"148","severity":1,"message":"151","line":103,"column":33,"nodeType":"150","endLine":108,"endColumn":42},{"ruleId":"148","severity":1,"message":"152","line":123,"column":37,"nodeType":"150","endLine":125,"endColumn":68},{"ruleId":"132","replacedBy":"153"},{"ruleId":"134","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":32,"column":3,"nodeType":"157","messageId":"158","endLine":34,"endColumn":4},{"ruleId":"159","severity":1,"message":"160","line":44,"column":21,"nodeType":"150","endLine":44,"endColumn":97},{"ruleId":"161","severity":1,"message":"162","line":64,"column":29,"nodeType":"150","endLine":64,"endColumn":71},{"ruleId":"148","severity":1,"message":"151","line":79,"column":37,"nodeType":"150","endLine":87,"endColumn":44},{"ruleId":"148","severity":1,"message":"151","line":103,"column":37,"nodeType":"150","endLine":111,"endColumn":44},{"ruleId":"148","severity":1,"message":"151","line":127,"column":37,"nodeType":"150","endLine":136,"endColumn":44},{"ruleId":"148","severity":1,"message":"151","line":153,"column":37,"nodeType":"150","endLine":160,"endColumn":44},{"ruleId":"148","severity":1,"message":"163","line":176,"column":45,"nodeType":"150","endLine":178,"endColumn":80},{"ruleId":"148","severity":1,"message":"149","line":184,"column":37,"nodeType":"150","endLine":185,"endColumn":70},{"ruleId":"148","severity":1,"message":"152","line":194,"column":37,"nodeType":"150","endLine":196,"endColumn":68},{"ruleId":"132","replacedBy":"164"},{"ruleId":"134","replacedBy":"165"},{"ruleId":"132","replacedBy":"166"},{"ruleId":"134","replacedBy":"167"},{"ruleId":"136","severity":1,"message":"168","line":5,"column":10,"nodeType":"138","messageId":"139","endLine":5,"endColumn":22},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'NavbarBrand' is defined but never used.",["169"],["170"],"'Form' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Moment' is defined but never used.","'required' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE",["169"],["170"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["169"],["170"],["169"],["170"],"'RenderLeader' is defined but never used.","no-global-assign","no-unsafe-negation"]